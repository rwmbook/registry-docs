= Open Discovery (open-disco)
:author: Mike Amundsen
:email: mca@mamund.com
:toc:

== Summary
This document details an _adhoc specification_ called *DISCO* (Discovering Interoperative Services for Continuous Operation). DISCO is a simple language for managing the adding/removing of services as well as the ability to search ("find") and make connections with ("bind") registered services.

DISCO was designed to be easy, open, lightweight, and extensible. For this reason, readers/implementers may find things "missing" or "underspecified." This is intentional. Gettings started is meant to be easy. And location customizations is allowed when desired.

The DISCO "language" supports the following features:
 * +register+ : add a service to the shared registry
 * +find+ : query the registry for services (dependents) to consume
 * +bind+ : notify the registry the intention to connect with and use another service
 * +renew+ : renew a service's registry 'lease' to prove is is still up and running
 * +unregister+ : remove a service from the registry

Optionally, services can expose a +health-check+ URL to allow registries to periodically check the status of a registered service.

Implementing a DISCO server is a simple as exposing URLs that support each of the above actions and supporting the defined input and output arguments in one or more identified media types.

Implementing support for DISCO in a service (or service proxy) can be accomplished by adding calls to a DISCO server to support the +register+, +unregister+, and +renew+ or +health-check+ methods. Optionally, services can add support for using the +find+ and +bind+ services if they wish to use the registry to locate other dependent services they consume.


== DISCO Design Goals
Here are some key design goals of the DISCO specification:

DISCO Should Be Easy::
 * The goal of DISCO is to make it safe/cheap/easy to create connections between APIs _at runtime_. Essentially, automating the process normally handled by humans (discovery at design/implementation time) and supported by CI/CD tools (resolution at build/deploy time).

DISCO is Open::
DISCO was also created to foster an open approach to service discovery and management. For this reason, DISCO has been implemented to run over HTTP returning standardized message formats (HTML, JSON, etc.). 

DISCO is Lightweight:: 
DISCO is not meant to create a close-loop, heavy-weight approach to managing services. It follows the same ethos as DNS, HTTP, etc. by doing only the minimum needed to accomplish a goal and to make no assumptions about the hardware, software, platform, or languages used to build and interact with DISCO servers.

DISCO is Extensible::
DISC was designed to be highly extensible. As long as implementers provide the required minimum service actions and support the defined semantic profile, they are free to add any number of optional features (as long as they don't break the defined DISCO profile).

== Simple Example
(tk)

== Documentation
(tk)

== Other Considerations
(tk)

== References
(tk)

